{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Alcali Documentation","text":""},{"location":"#whats-alcali","title":"What's Alcali?","text":"<p>Alcali is a web based tool for monitoring and administrating Saltstack Salt.</p>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>Get notified in real time when a job is created, updated or has returned. </p> </li> <li> <p>Store your jobs results by leveraging the <code>master_job_store</code> setting with database master returner.</p> </li> <li> <p>Check your minions conformity to their highstate or any state.</p> </li> <li> <p>Keep track of custom state at a glance.</p> </li> <li> <p>Use custom auth module to login into both Alcali and the Salt-api using JWT.</p> </li> <li> <p>LDAP and Google OAuth2 authentication.</p> </li> </ul> <p> </p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you'd like to contribute, check the contribute documentation on how to install a dev environment and submit PR!</p> <p>And if you like this project, consider donating:</p> <p>via GitHub Sponsors, or</p> <p></p> <p><sub><sub>Image: Jean-Philippe WMFr, derivative work\u00a0: User:Benoit Rochon CC BY-SA 4.0</sub></sub></p>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#configure-alcali","title":"Configure Alcali","text":"<p>If you used the formula to install alcali, you should use the pillar to set those environment variable.</p>"},{"location":"configuration/#db_backend","title":"<code>DB_BACKEND</code>","text":"<p>Must either be set to <code>mysql</code> or <code>postgresql</code> depending on your database choice.</p>"},{"location":"configuration/#db_name","title":"<code>DB_NAME</code>","text":"<p>Must always be set to <code>salt</code>.</p>"},{"location":"configuration/#db_user","title":"<code>DB_USER</code>","text":"<p>The username used to connect to the salt database.</p>"},{"location":"configuration/#db_pass","title":"<code>DB_PASS</code>","text":"<p>The password used to connect to the salt database.</p>"},{"location":"configuration/#db_host","title":"<code>DB_HOST</code>","text":"<p>Either the hostname or the IP used to connect to the salt database.</p>"},{"location":"configuration/#db_port","title":"<code>DB_PORT</code>","text":"<p>By default 3306 for Mysql or 5432 for Postgres.</p>"},{"location":"configuration/#secret_key","title":"<code>SECRET_KEY</code>","text":"<p>Used to provide cryptographic signing, and should be set to a unique, unpredictable value.</p>"},{"location":"configuration/#allowed_hosts","title":"<code>ALLOWED_HOSTS</code>","text":"<p>Values in this list can be fully qualified names (e.g. 'www.example.com'), in which case they will be matched against the request\u2019s Host header exactly (case-insensitive, not including port).</p> <p>A value beginning with a period can be used as a subdomain wildcard: '.example.com' will match example.com, www.example.com, and any other subdomain of example.com. A value of '*' will match anything.</p>"},{"location":"configuration/#master_minion_id","title":"<code>MASTER_MINION_ID</code>","text":"<p>Salt master's minion id. leave empty if not managed.</p>"},{"location":"configuration/#salt_url","title":"<code>SALT_URL</code>","text":"<p>The salt-api url.</p> <p>Must be formed with protocol, host and port (e.g. 'https://localhost:8080')</p>"},{"location":"configuration/#salt_auth","title":"<code>SALT_AUTH</code>","text":"<p>How you choose to authenticate to the salt-api.</p> <p>Must be set to  <code>rest</code> or <code>alcali</code>.</p>"},{"location":"configuration/#ldap-configuration","title":"LDAP configuration","text":"<p>Please refer to django-auth-ldap documentation reference.</p> <p>Here is a list of the supported settings:</p> <ul> <li>AUTH_LDAP_SERVER_URI</li> <li>AUTH_LDAP_BIND_DN</li> <li>AUTH_LDAP_BIND_PASSWORD</li> <li>AUTH_LDAP_USER_DN_TEMPLATE</li> <li>AUTH_LDAP_REQUIRE_GROUP</li> <li>AUTH_LDAP_DENY_GROUP</li> <li>AUTH_LDAP_START_TLS</li> </ul>"},{"location":"configuration/#searchbind-and-direct-bind","title":"search/bind and direct bind","text":"<p>If you set <code>AUTH_LDAP_USER_DN_TEMPLATE</code> the search phase will be skipped.</p> <p>Otherwise, you can set the search base cn with:</p> <p><code>AUTH_LDAP_USER_BASE_CN</code> </p> <p>and the search filter with:</p> <p><code>AUTH_LDAP_USER_SEARCH_FILTER</code> default: <code>\"(objectClass=*)\"</code></p> <p>see next for an example.</p>"},{"location":"configuration/#attribute-mapping","title":"Attribute mapping","text":"<p>Here is the default attribute mapping and the env var to use to override them:</p> <pre><code># Populate the Django user from the LDAP directory.\nAUTH_LDAP_USER_ATTR_MAP = {\n    \"username\": os.environ.get(\"AUTH_LDAP_USER_ATTR_MAP_USERNAME\", \"sAMAccountName\"),\n    \"first_name\": os.environ.get(\"AUTH_LDAP_USER_ATTR_MAP_FIRST_NAME\", \"givenName\"),\n    \"last_name\": os.environ.get(\"AUTH_LDAP_USER_ATTR_MAP_LAST_NAME\", \"sn\"),\n    \"email\": os.environ.get(\"AUTH_LDAP_USER_ATTR_MAP_EMAIL\", \"mail\"),\n}\n</code></pre>"},{"location":"configuration/#google-oauth2-configuration","title":"Google OAuth2 configuration","text":"<p>These environment variable must be set:</p> <pre><code>AUTH_BACKEND=social\nSOCIAL_AUTH_GOOGLE_OAUTH2_KEY=XXXXX.apps.googleusercontent.com\nSOCIAL_AUTH_GOOGLE_OAUTH2_SECRET=XXX\nSOCIAL_AUTH_REDIRECT_URI=&lt;FULL URI&gt; ex: https://foo.bar:9000\n</code></pre> <p>To limit access to certain emails:</p> <pre><code>SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_EMAILS=&lt;COMMA SEP EMAILS&gt;\n</code></pre> <p>and/or certain domains:</p> <pre><code>SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS=&lt;COMMA SEP DOMAINS&gt;\n</code></pre>"},{"location":"configuration/#env-file-example","title":"<code>.env</code> file example:","text":"<pre><code>DB_BACKEND=mysql\nDB_NAME=salt\nDB_USER=alcali\nDB_PASS=alcali\nDB_HOST=db\nDB_PORT=3306\n\nSECRET_KEY=thisisnotagoodsecret.orisit?\nALLOWED_HOSTS=*\nMASTER_MINION_ID=master\n\nSALT_URL=https://localhost:8080\nSALT_AUTH=alcali\n</code></pre> <p>If you want to use LDAP authentication, you'll also need:</p> <pre><code>AUTH_BACKEND=ldap\nAUTH_LDAP_SERVER_URI=ldap://ldap-server\nAUTH_LDAP_BIND_DN=cn=admin,dc=example,dc=org\nAUTH_LDAP_BIND_PASSWORD=admin\nAUTH_LDAP_USER_BASE_CN=dc=example,dc=org\nAUTH_LDAP_USER_SEARCH_FILTER=(uid=%(user)s)\n</code></pre>"},{"location":"configuration/#docker","title":"Docker","text":"<p>You can pass the <code>.env</code> file to the <code>docker run</code> command with the <code>--env-file=FILE</code> option.</p> <p>See running Alcali.</p>"},{"location":"configuration/#running-locally","title":"Running locally","text":"<p>Use the <code>ENV_PATH</code> environment variable.</p> <p>Example:</p> <pre><code># Assuming the .env file is in /opt/alcali\nENV_PATH=/opt/alcali /opt/alcali/.venv/bin/gunicorn config.wsgi:application -b 127.0.0.1:8000 -w 3\n</code></pre> <p>See running Alcali.</p>"},{"location":"contribute/","title":"Contributing Guide","text":"<p>Contributing to Alcali is fairly easy. This document shows you how to get started</p>"},{"location":"contribute/#general","title":"General","text":"<p>Please ensure that any changes you make are in accordance with the Coding Guidelines of this repo.</p> <p>Just use Black to validate your python code.</p>"},{"location":"contribute/#install-a-dev-environment","title":"Install a dev environment","text":"<p>First fork the repository and install your fork locally.</p> <pre><code>git clone git@github.com:&lt;YOUR USERNAME&gt;/alcali.git\ncd alcali\n</code></pre> <p>Alcali use Vuejs for the frontend and Django for the backend.</p>"},{"location":"contribute/#frontend-dev","title":"Frontend dev","text":"<p>Install the Vue CLI:</p> <pre><code>npm install -g @vue/cli\n# OR\nyarn global add @vue/cli\n</code></pre> <p>install js deps:</p> <pre><code>npm install\n# OR\nyarn install\n</code></pre> <p>and run your build locally:</p> <pre><code>npm run serve -- --port 8001\n</code></pre> <p>You will also need a backend running in another terminal.</p>"},{"location":"contribute/#backend-dev","title":"Backend dev","text":"<pre><code>docker compose up --build --force-recreate --renew-anon-volumes --scale minion=2\n</code></pre>"},{"location":"contribute/#documentation","title":"Documentation","text":"<p>To contribute to the documentation, you'll need to install the python requirements, preferably in a virtualenv:</p> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\npip install -r requirements/docs.txt\n</code></pre> <p>And build it locally:</p> <pre><code>cd docs\nmkdocs serve -a 127.0.0.1:8003\n</code></pre>"},{"location":"contribute/#run-tests-locally","title":"Run tests locally","text":"<pre><code>docker compose -f docker-compose-ci.yml up --build \n</code></pre> <p>and in another shell:</p> <pre><code>./docker/utils/ci_script.sh\n</code></pre> <p>Tests are idempotent~ish</p>"},{"location":"contribute/#submitting-changes","title":"Submitting changes","text":"<p>Check out a new branch based and name it to what you intend to do:</p> <pre><code>$ git checkout -b BRANCH_NAME feature/fooBar\n</code></pre> <p>If you get an error, you may need to fetch fooBar first by using</p> <pre><code>$ git remote update &amp;&amp; git fetch\n</code></pre> <p>Use one branch per fix / feature</p> <p>Commit your changes</p> <ul> <li>Please provide a git message that explains what you've done</li> <li>Please make sure your commits follow the conventions</li> <li>Commit to the forked repository</li> </ul> <pre><code>$ git commit -am 'Add some fooBar'\n</code></pre> <p>Push to the branch</p> <pre><code>$ git push origin feature/fooBar\n</code></pre> <p>Make a pull request - Make sure you send the PR to the <code>fooBar</code> branch - Travis CI is watching you!</p> <p>If you follow these instructions, your PR will land pretty safely in the main repo!</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisite","title":"Prerequisite","text":"<ul> <li>A database (MariaDB/Mysql or Postgres) accessible to both your Salt master and Alcali.</li> <li>the Salt-Api installed and accessible by Alcali.</li> </ul>"},{"location":"installation/#preparing-the-salt-master","title":"Preparing the salt master","text":""},{"location":"installation/#database-access-and-master-job-store-configuration","title":"Database access and master job store configuration","text":"<p>The salt master needs to store its jobs on the chosen database.</p> <p>Warning</p> <p>Don't forget to install database connectors:</p> <ul> <li><code>python-mysqldb/python3-mysqldb</code> for MySQL/MariaDB</li> <li><code>python-psycopg2/python3-psycopg2</code> for Postgres</li> </ul> MySQL/MariaDB schema and configuration example <p> <pre><code>CREATE DATABASE  `salt`\nDEFAULT CHARACTER SET utf8\nDEFAULT COLLATE utf8_general_ci;\n\nUSE `salt`;\n\n--\n-- Table structure for table `jids`\n--\n\nDROP TABLE IF EXISTS `jids`;\nCREATE TABLE `jids` (\n`jid` varchar(255) NOT NULL,\n`load` mediumtext NOT NULL,\nUNIQUE KEY `jid` (`jid`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n--\n-- Table structure for table `salt_returns`\n--\n\nDROP TABLE IF EXISTS `salt_returns`;\nCREATE TABLE `salt_returns` (\n`fun` varchar(50) NOT NULL,\n`jid` varchar(255) NOT NULL,\n`return` mediumtext NOT NULL,\n`id` varchar(255) NOT NULL,\n`success` varchar(10) NOT NULL,\n`full_ret` mediumtext NOT NULL,\n`alter_time` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\nKEY `id` (`id`),\nKEY `jid` (`jid`),\nKEY `fun` (`fun`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n--\n-- Table structure for table `salt_events`\n--\n\nDROP TABLE IF EXISTS `salt_events`;\nCREATE TABLE `salt_events` (\n`id` BIGINT NOT NULL AUTO_INCREMENT,\n`tag` varchar(255) NOT NULL,\n`data` mediumtext NOT NULL,\n`alter_time` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n`master_id` varchar(255) NOT NULL,\nPRIMARY KEY (`id`),\nKEY `tag` (`tag`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n</code></pre>    Salt master configuration example:   <pre><code>event_return: [mysql]\nmaster_job_cache: mysql\nmysql.host: 'db'\nmysql.user: 'alcali'\nmysql.pass: 'alcali'\nmysql.db: 'salt'\nmysql.port: 3306\n</code></pre> </p> Postgres commands and configuration example <p> <pre><code>psql &lt;&lt; EOF\nCREATE ROLE salt WITH PASSWORD 'salt';\nCREATE DATABASE salt WITH OWNER salt;\nEOF\n\npsql -h localhost -U salt &lt;&lt; EOF\n--\n-- Table structure for table 'jids'\n--\n\nDROP TABLE IF EXISTS jids;\nCREATE TABLE jids (\njid   varchar(20) PRIMARY KEY,\nload  text NOT NULL\n);\n\n--\n-- Table structure for table 'salt_returns'\n--\n\nDROP TABLE IF EXISTS salt_returns;\nCREATE TABLE salt_returns (\nfun       varchar(50) NOT NULL,\njid       varchar(255) NOT NULL,\nreturn    text NOT NULL,\nfull_ret  text,\nid        varchar(255) NOT NULL,\nsuccess   varchar(10) NOT NULL,\nalter_time   TIMESTAMP WITH TIME ZONE DEFAULT now()\n);\n\nCREATE INDEX idx_salt_returns_id ON salt_returns (id);\nCREATE INDEX idx_salt_returns_jid ON salt_returns (jid);\nCREATE INDEX idx_salt_returns_fun ON salt_returns (fun);\nCREATE INDEX idx_salt_returns_updated ON salt_returns (alter_time);\n\n--\n-- Table structure for table 'salt_events'\n--\n\nDROP TABLE IF EXISTS salt_events;\nDROP SEQUENCE IF EXISTS seq_salt_events_id;\nCREATE SEQUENCE seq_salt_events_id;\nCREATE TABLE salt_events (\nid BIGINT NOT NULL UNIQUE DEFAULT nextval('seq_salt_events_id'),\ntag varchar(255) NOT NULL,\ndata text NOT NULL,\nalter_time TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\nmaster_id varchar(255) NOT NULL\n);\n\nCREATE INDEX idx_salt_events_tag on salt_events (tag);\n\nEOF\n</code></pre>    Salt master configuration example:   <pre><code>event_return: [postgres]\nmaster_job_cache: postgres returner.postgres.host: 'db'\nreturner.postgres.user: 'alcali'\nreturner.postgres.passwd: 'alcali'\nreturner.postgres.db: 'salt'\nreturner.postgres.port: 5432\n</code></pre> </p> <p>By default, jobs are only kept for 24 hours. Set <code>keep_jobs: 0</code> to disable the cache cleaner (see managing the job cache).</p> <p>Returners provide a way to archive old jobs. Refer to Salt MySQL or Postgres returner documentation for more information.</p>"},{"location":"installation/#salt-api","title":"Salt Api","text":"<p>Salt master configuration example:</p> <pre><code>rest_cherrypy:\nport: 8080\nhost: 0.0.0.0\ndebug: True\nssl_crt: /etc/pki/tls/certs/localhost.crt\nssl_key: /etc/pki/tls/certs/localhost.key\n</code></pre> <p>Install instruction example (On Debian 9 using Salt python3 version):</p> <pre><code>apt-get install -y salt-api python3-openssl\nsalt-call --local tls.create_self_signed_cert cacert_path='/etc/pki'\n</code></pre> <p>Please refer to Salt rest_cherrypy documentation for more infos on how to setup the salt-api.</p>"},{"location":"installation/#authentication","title":"Authentication","text":"<p>Alcali provide two authentication methods:</p> <ul> <li>a rest endpoint on alcali.</li> <li>a custom token based auth module for Salt.</li> </ul>"},{"location":"installation/#rest-endpoint-authentication","title":"Rest endpoint authentication","text":"<p>To use the rest endpoint authentication, the salt master must be able to connect to alcali.</p> <p>Set <code>SALT_AUTH=rest</code> in the env file and use the rest external auth in the salt master configuration.</p> <p>the <code>^url</code> key is how the salt master connect to alcali.</p> <pre><code>external_auth:\nrest:\n^url: http://127.0.0.1:8000/api/token/verify/\nadmin:\n- .*\n- '@runner'\n- '@wheel'\n</code></pre>"},{"location":"installation/#custom-token-auth-module","title":"Custom token auth module","text":"<p>Set <code>SALT_AUTH=alcali</code> in the env file</p> <p>You can get the Alcali auth module here</p> <p>Place it on the salt filesystem (for example: <code>/srv/salt/auth</code>) and add it to your Salt master configuration:</p> <pre><code>auth_dirs: [/srv/salt/auth]\n</code></pre> <p>External auth example:</p> <pre><code>eauth_acl_module: alcali\nkeep_acl_in_token: true\n\nexternal_auth:\nalcali:\nadmin:\n- .*\n- '@runner'\n- '@wheel'\n</code></pre> <p>Don't forget to run <code>salt-run saltutil.sync_all</code> on the salt master.</p> <p>See Saltstack external auth system for more infos.</p> <p>Tokens can be managed using the alcali command or directly in the web interface.</p>"},{"location":"installation/#installing-alcali","title":"Installing Alcali","text":"<p>The easiest way to install Alcali is to use the Salt Formula</p> <p>Info</p> <p>Alcali follow Salt major and minor versioning.</p> <p>If you are using <code>2019.2.X</code> Salt version, you should install <code>2019.2.X</code> Alcali version.</p> <p>Otherwise, there are 3 different ways to install Alcali manually:</p> <ul> <li>Using a docker container</li> <li>From PyPI</li> <li>From Sources</li> </ul>"},{"location":"installation/#using-docker","title":"Using Docker","text":"<p>The official Docker image for Alcali comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI. Pull it with:</p> <pre><code># you can specify which version: latenighttales/alcali:2018.3.2\ndocker pull latenighttales/alcali:latest\n</code></pre> <p>The <code>alcali</code> executable is provided as an entrypoint.</p>"},{"location":"installation/#locally","title":"Locally","text":"<p>To install Alcali locally, you'll need to install database connectors dependencies:</p> <p>For Debian based distribution:</p> <pre><code># For postgres database\napt install libpq-dev gcc\n# For mariadb database\napt install libmariadbclient-dev gcc\n</code></pre> <p>For Red-Hat based distribution:</p> <pre><code># For postgres database\nyum install libpq-devel gcc\n# For mariadb database\nyum install mysql-devel gcc\n</code></pre>"},{"location":"installation/#install-from-pypi","title":"Install from PyPI","text":"<p>Warning</p> <p>We strongly recommend installing Alcali in a virtualenv.</p> <p>Example:</p> <p><code>python3 -m venv $HOME/.venv</code></p> <p><code>source $HOME/.venv/bin/activate</code></p> <p>Simply do:</p> <pre><code>pip install --user alcali\n</code></pre> <p>And for mysql/mariadb:</p> <pre><code>pip install --user mysqlclient\n</code></pre> <p>or for postgres:</p> <pre><code>pip install --user psycopg2\n</code></pre>"},{"location":"installation/#install-from-sources","title":"Install from Sources","text":"<pre><code>git clone https://github.com/latenighttales/alcali.git\ngit checkout 2019.2 # or 2018.3\npip install --user . \n</code></pre> <p>And for mysql/mariadb:</p> <pre><code>pip install --user mysqlclient\n</code></pre> <p>or for postgres:</p> <pre><code>pip install --user psycopg2\n</code></pre>"},{"location":"installation/#installation-with-ldap-support","title":"Installation with LDAP support","text":"<p>if you want to use LDAP to authenticate users, you'll need these system dependencies:</p> <p>For Debian based distribution:</p> <pre><code>apt install libldap2-dev libsasl2-dev ldap-utils\n</code></pre> <p>For Red-Hat based distribution:</p> <pre><code>yum install openldap-devel\n</code></pre> <p>To add LDAP support to alcali, just append <code>[ldap]</code> to the chosen install method i.e:</p> <pre><code># Install from PyPI\npip install --user alcali[ldap]\n\n# Install from Source\npip install --user .[ldap]\n</code></pre>"},{"location":"installation/#installation-with-google-oauth2-support","title":"Installation with Google OAuth2 support","text":"<p>To add Google OAuth2 support to alcali, just append <code>[social]</code> to the chosen install method i.e:</p> <pre><code># Install from PyPI\npip install --user alcali[social]\n\n# Install from Source\npip install --user .[social]\n</code></pre>"},{"location":"licence/","title":"Licence","text":"<p>MIT License</p> <p>Copyright (c) 2019 Matt Melquiond</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"running/","title":"Running Alcali","text":"<p>Info</p> <p>This page will assume you are running alcali locally.</p> <p>If you are using docker, just prepend commands with <code>docker exec -it &lt;name&gt;</code></p> <p>First make sure that Alcali is correctly installed.</p> <p>You can verify installation by running:</p> <pre><code>alcali current_version\n# alcali version 2019.2.2\n</code></pre> <p>You  can also check that Alcali can access <code>salt</code> database and that needed env var are set and loaded by running:</p> <pre><code>alcali check\n# db: ok\n# env: ok\n</code></pre>"},{"location":"running/#first-run","title":"First Run","text":""},{"location":"running/#apply-migrations","title":"Apply migrations","text":"<p>Danger</p> <p>On the first run and after every update, you need to make sure that the database is synchronized with the current set of models and migrations. If unsure, just run <code>alcali migrate</code></p> <p>Locally:</p> <pre><code>alcali migrate\n</code></pre>"},{"location":"running/#create-a-super-user","title":"Create a super user","text":"<p>Run:</p> <pre><code>alcali createsuperuser\n</code></pre> <p>You will be prompted for your desired login, email address and password.</p>"},{"location":"running/#run","title":"Run","text":"<p>Once migrations are applied and a super user is created, you can start the application.</p> <p>Alcali use Gunicorn as a WSGI HTTP server. It is installed during the installation process of Alcali.</p> <p>Warning</p> <p>If the .env file is not in your current directory, prepend your command with <code>ENV_PATH=/path/to/env_file</code></p> <p>If you installed Alcali from sources, at the root of the repository, run:</p> <pre><code>gunicorn config.wsgi:application -w 4\n</code></pre> <p>If you installed Alcali using pip, run:</p> <pre><code>gunicorn config.wsgi:application -w 4 --chdir $(alcali location)\n</code></pre> <p>In a docker container:</p> <pre><code>docker run --rm -it -p 8000:8000 --env-file=FILE latenighttales/alcali:2019.2.2 bash -c \"gunicorn config.wsgi:application -w 4 --chdir $(alcali location)\"\n</code></pre> <p>Where FILE is the location of the .env file</p>"},{"location":"screenshots/","title":"Screenshots","text":"Login Login Dark"},{"location":"screenshots/#dashboard","title":"Dashboard","text":""},{"location":"screenshots/#minions","title":"Minions","text":""},{"location":"screenshots/#minion-details","title":"Minion Details","text":"Jobs Jobs Dark"},{"location":"screenshots/#job-details","title":"Job Details","text":""},{"location":"screenshots/#run","title":"Run","text":""},{"location":"screenshots/#job-templates","title":"Job Templates","text":"Keys Keys Dark"},{"location":"screenshots/#conformity","title":"Conformity","text":""},{"location":"screenshots/#conformity-details","title":"Conformity Details","text":""},{"location":"screenshots/#users","title":"Users","text":""},{"location":"screenshots/#settings","title":"Settings","text":""},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#salt-api-connection","title":"Salt-Api connection","text":"<p>you can try this <code>curl</code> command using pam authentication and see if you can login</p>"},{"location":"troubleshooting/#salt-api-using-the-alcali-auth-module","title":"Salt-Api using the alcali auth module","text":"<p>If the salt-api works with pam auth, then there's probably an issue with the alcali authentication:</p> <ul> <li>Is the auth module accessible to salt? (it should be in a sub folder called <code>auth</code> of the file_roots</li> <li>Have you run <code>salt-run saltutil.sync_all</code> on the salt-master? it is needed for the salt-master to \"see\" the auth module.</li> </ul> <p>Log messages of the salt-api and salt-master should tell you if the module is found and auth is successful.</p>"},{"location":"troubleshooting/#salt-master-configuration-example","title":"Salt Master configuration example","text":"<p>A salt-master configuration in the repository as an example.</p>"},{"location":"try/","title":"Try it!","text":"<p>If you just want to have a look, just clone the repository and use docker-compose:</p> <pre><code>git clone https://github.com/latenighttales/alcali.git\ncd alcali\ndocker-compose up --scale minion=2\n</code></pre> <p>Once you see minions waiting to be approved by the master, you're good to go:</p> <pre><code>...\nminion_1  | [ERROR   ] The Salt Master has cached the public key for this node, this salt minion will wait for 10 seconds before attempting to re-authenticate\nminion_1  | [INFO    ] Waiting 10 seconds before retry.\n...\n</code></pre> <p>Just connect on http://127.0.0.1:8000, login with:</p> <pre><code>username: admin\npassword: password\n</code></pre> <p>and follow the walkthrough.</p> <p>Once you're done, you can install it.</p>"},{"location":"upgrade/","title":"Upgrade","text":"<p>Danger</p> <p>Each time you upgrade Alcali, you must apply database migrations.</p> <p>To do so, you must first stop the service, upgrade, and then, just run:</p> <pre><code>alcali migrate\n</code></pre> <p>And restart the service.</p>"},{"location":"walkthrough/","title":"Walkthrough","text":"<p>After you logged in at http://localhost:8000/#/login with:</p> <pre><code>username: admin\npassword: password\n</code></pre> <p>You should land on the Dashboard view. </p> <p>For now it's empty, but you can already see that some keys are <code>UNACCEPTED</code>.</p> <p>So let's go to the Keys view: http://localhost:8000/#/keys</p>"},{"location":"walkthrough/#accept-keys","title":"Accept keys","text":"<p>You can either accept keys one by one using the <code>ACCEPT</code> button, or use the action button  to accept all keys.</p>"},{"location":"walkthrough/#add-minions","title":"Add minions","text":"<p>To store infos on connected minions, we need to add them to the database.</p> <p>Go to http://localhost:8000/#/minions and use the action button  to refresh minions.</p> <p></p> <p>Info</p> <p>By default, refreshing minions will run:</p> <ul> <li><code>test.ping</code></li> <li><code>grains.items</code></li> <li><code>pillar.items</code></li> </ul> <p>on each connected minions.</p>"},{"location":"walkthrough/#minion-detail","title":"Minion detail","text":"<p>From the minions view, you can click on a <code>minion id</code> to see its details, for example: http://localhost:8000/#/minions/master/.</p> <p></p> <p>Details are parsed from the <code>grains.items</code> state. On the right, 4 tabs are present for now:</p> <ul> <li><code>grains.items</code></li> <li><code>pillar.items</code></li> <li>The last 100 jobs run on this minion</li> <li>A graph of jobs run on this minion</li> </ul> <p>Let's add some useful infos by setting some minions fields. To do so, go to the settings view http://localhost:8000/#/settings.</p>"},{"location":"walkthrough/#settings","title":"Settings","text":"<p>Choose a target and run the module parser to have documentation and module completion.</p> <p>Let's add some minion fields.</p> <p></p> <p>We usually add:</p> <ul> <li> <p>highstate: <code>state.show_highstate</code></p> </li> <li> <p>top file: <code>state.show_top</code></p> </li> </ul> <p>Use the action button to refresh all minions.</p> <p>If you go see a minion's details, for example, http://localhost:8000/#/minions/master/, the new minion fields should be present.</p> <p>Minion fields are usually used for \"static\" minion specific data.</p> <p>For dynamic data, there's conformity.</p> <p>As a config management tool, it's important to track state of files presence, software version, etc...</p> <p>Custom conformity let you do that.</p> <p></p> <p>As an example, we'll add:</p> <ul> <li> <p>foo: <code>file.file_exists /foo.txt</code></p> </li> <li> <p>pyversion: <code>cmd.run \"python --version\"</code></p> </li> </ul> <p>If you go to the overview, the two new custom conformity should be present but empty.</p> <p></p> <p>Let's go run some jobs to fix that.</p>"},{"location":"walkthrough/#run","title":"Run","text":"<p>Go to http://localhost:8000/#/run</p> <p>You can explore the formatted tab or just use the cli and run:</p> <pre><code>salt master cmd.run \"touch /foo.txt\"\n</code></pre> <p>We just created the file <code>/foo.txt</code> on the master, so the master will comply to the \"foo\" conformity we added earlier.</p> <p>Conformity is parsed from the states present in the database, so let's run:</p> <pre><code>salt * cmd.run \"python --version\"\nsalt * file.file_exists \"/foo.txt\"\n</code></pre> <p>By the way, there should be tab completion in the CLI and documentation in the tooltip on the formatted tab thanks to the parse module action we did earlier. </p> <p>Finally, highstate any or all minions.</p> <pre><code>salt master state.apply\n</code></pre>"},{"location":"walkthrough/#conformity","title":"Conformity","text":"<p>In the overview, the conformity card should be filled now, with details when you hover it.</p> <p></p> <p>A table with both highstate conformity and your custom ones for all minions is available in the conformity view http://localhost:8000/#/conformity.</p> <p></p> <p>Details about each states in the highstate are available by clicking the <code>DETAIL</code> button.</p> <p></p>"},{"location":"views/conformity/","title":"Conformity","text":""},{"location":"views/conformity/#highstate","title":"Highstate","text":"<p>Highstate conformity will schedule a job named highstate_conformity on selected targets.</p> <p>The function used is <code>state.apply test=True</code>.</p> <p>You can use salt targeting syntax, e.g: <code>-G 'os:Fedora'</code>.</p> <p>By default, it will target all minions (<code>'*'</code>).</p>"},{"location":"views/conformity/#custom","title":"Custom","text":"<p>Custom conformity will parse the supplied function in minions job history and provide the result on the overview page.</p> <p>To be meaningful, you should run the function regularly (e.g. scheduling a recurring job).</p>"},{"location":"views/conformity_details/","title":"Conformity Details","text":"<p>All states are sorted by status.</p>"},{"location":"views/events/","title":"Events","text":"<p>By default, display only the last 100 Events.</p> <p>Danger</p> <p>It's up to you to monitor <code>salt</code> database. The <code>salt_events</code> table can grow very rapidely.</p> <p>Returners have method to clean jobs regularly.</p>"},{"location":"views/job_detail/","title":"Job Detail","text":"<p>If the job isn't a highstate, we'll use the nested outputter.</p>"},{"location":"views/job_templates/","title":"Job Templates","text":"<p>To create a job template, fill some fields in the run view, switch on \"Save as Template\",  and choose a name.</p> <p></p>"},{"location":"views/jobs/","title":"Jobs","text":"<p>By default, only the last 100 jobs are displayed.</p> <p>You can display/search more using the filters on top.</p> <p>Filter by:</p> <ul> <li>date or date range</li> <li>minion(s).</li> <li>user(s).</li> </ul> <p>To access job detail either click on the jid or detail button.</p>"},{"location":"views/keys/","title":"Keys","text":"<p> If you use Alcali master returner, Keys should be automatically refreshed. That's the only difference from the original MySQL Salt returner.</p> <p>Otherwise, you should refresh keys manually using the action button.</p> <p>Action buttons</p> <p>To make life easier, states used to manage keys are more radical than default salt behaviour.</p> <p>It means that if you use the <code>REJECT</code> button, it will use <code>include_accepted</code> and <code>include_denied</code> argument.</p> <p>If you use the <code>ACCEPT</code> button, it will use <code>include_rejected</code> and <code>include_denied</code> argument.</p> <p>Use wisely.</p>"},{"location":"views/minion_details/","title":"Minion Detail","text":""},{"location":"views/minion_details/#infos-and-network","title":"Infos and Network","text":"<p>All those details are parsed from <code>grain.items</code> except conformity.(see conformity for more infos).</p> <p>By default, the right section contains only:</p> <ul> <li>GRAIN: <code>grains.items</code></li> <li>PILLAR: <code>pillar.items</code></li> <li>HISTORY: Last 100 jobs for this minion.</li> <li>GRAPH: Filtered for this minion.</li> </ul> <p>You can add more section by adding some minion custom fields.</p> <p>We recommend adding:</p> <ul> <li>HIGHSTATE: <code>state.show_highstate</code></li> <li>TOP FILE: <code>state.show_top</code></li> </ul>"},{"location":"views/minions/","title":"Minions","text":"<p>List all minions currently in Alcali database.</p> <p>To add more minions, use the action button and refresh all minions.</p> <p>Info</p> <p>By default, refreshing minions will run <code>test.ping</code> <code>grains.items</code> and <code>pillar.items</code> on all minions responding to <code>test.ping</code>.</p> <p>If you add custom minions fields, the states you add will be run too.</p> <p>To access minion details, click on the minion id.</p>"},{"location":"views/overview/","title":"Overview","text":""},{"location":"views/overview/#conformity","title":"Conformity","text":"<p>Conformity details can be managed on the conformity page.</p> <p>You can set a maximum of 4 custom conformity fields. To be relevant, functions tracked by conformity fields must be run regularly.</p>"},{"location":"views/overview/#keys","title":"Keys","text":"<p>Summary of keys status.</p> <p>You can manage keys on the keys page.</p>"},{"location":"views/overview/#status","title":"Status","text":""},{"location":"views/overview/#salt-web-socket","title":"SALT WEB SOCKET","text":"<p>To display notifications on currently running jobs, alcali needs to connect to the Salt master web socket using credentials provided in the configuration.</p>"},{"location":"views/overview/#jobs-and-events-in-db","title":"JOBS AND EVENTS IN DB","text":"<p>Please refer to Mysql or Postgres returner documentation on how to manage database from Salt. A summary is provided in the installation section.</p>"},{"location":"views/overview/#jobs-scheduled","title":"JOBS SCHEDULED","text":"<p>How many unique jobs based on the job name are currently enabled (see schedule section).</p>"},{"location":"views/overview/#jobs-running","title":"JOBS RUNNING","text":"<p>Parsed from Salt web socket.</p>"},{"location":"views/overview/#jobs-stats","title":"Jobs Stats","text":"<p>Filter:</p> <ul> <li>ALL: All jobs.</li> <li>HIGHSTATE: only <code>state.apply</code> and <code>state.highstate</code> jobs.</li> <li>OTHER: All excluding <code>state.apply</code> and <code>state.highstate</code> jobs.</li> </ul>"},{"location":"views/overview/#last-jobs","title":"Last Jobs","text":"<p>The last 10 jobs run (see jobs section).</p>"},{"location":"views/overview/#real-time-events","title":"Real time events","text":"<p>JSON formatted events in real time.</p>"},{"location":"views/run/","title":"Run","text":"<p>You can run job using either the formatted form or a pseudo cli.</p>"},{"location":"views/run/#formatted","title":"Formatted","text":"<p>For function completion and documentation, use the parse module setting. Your custom modules should also be present.</p>"},{"location":"views/run/#client-type","title":"Client type","text":"<ul> <li> <p>Local: Run execution modules synchronously. Sends a command from the master to the targeted minions. This is the same interface that Salt's own CLI uses.</p> </li> <li> <p>Runner: Master side execution sequences.</p> </li> <li> <p>Wheel: Master side management routine.</p> </li> </ul>"},{"location":"views/run/#target-type","title":"Target type","text":""},{"location":"views/run/#target","title":"Target","text":"<p>This depends on the selected Target type.</p>"},{"location":"views/run/#function","title":"Function","text":"<p>Function completion and documentation are taken from the parse module setting.</p>"},{"location":"views/run/#args-and-keyword-arguments","title":"Args and Keyword Arguments","text":"<p>Use these fields for functions. If functions use named args or kwargs, they should be suggested.</p>"},{"location":"views/run/#schedule","title":"Schedule","text":"<p>Schedule a recurring job, or postpone it.</p>"},{"location":"views/run/#test-button","title":"Test button","text":"<p>The test button will run the selected function with <code>test=True</code> kwarg added set.</p>"},{"location":"views/run/#cli","title":"CLI","text":"<p>This pseudo CLI should work like the salt command.</p> <p>There's a basic completion on minions and states.</p> <p>If you want to run a state using another client type use <code>--client=</code> argument.</p> <p>For example:</p> <pre><code>salt --client=wheel key.list_all\n</code></pre>"},{"location":"views/schedule/","title":"Schedule","text":"<p>Warning</p> <p>Schedules are not automatically added to the list. To refresh schedules, use the action refresh schedule button.</p> <p>You can disable and delete schedules.</p>"},{"location":"views/settings/","title":"Settings","text":""},{"location":"views/settings/#general-settings","title":"General Settings","text":""},{"location":"views/settings/#parse-modules","title":"Parse modules","text":"<p>To provide function completion and documentation run this on a selected target.</p> <p>This will run <code>sys.list_functions</code>, <code>sys.doc</code>, <code>sys.list_runner_functions</code> and <code>sys.runner_doc</code> on the selected target. </p> <p>It will also run <code>doc.wheel</code> on the connected salt master.</p> <p>If you have custom modules present on the selected target, they will be parsed too.</p>"},{"location":"views/settings/#minions-fields","title":"Minions Fields","text":"<p>To add more details in the minion detail page, you can add custom minions fields.</p> <p>We usually add:</p> <ul> <li>highstate: <code>state.show_highstate</code></li> <li>top file: <code>state.show_highstate</code></li> </ul> <p>Info</p> <p>Because minions fields are linked to minions, you need to first have some minions present in the database.</p> <p>Use the refresh minions action button.</p>"},{"location":"views/settings/#user-settings","title":"User Settings","text":""},{"location":"views/settings/#job-notifications","title":"Job notifications","text":"<p>Filter which events are being displayed in the notification section and real-time events.</p> <p>Warning</p> <p>Salt's event stream is very busy and can easily overwhelm the available memory for a browser tab. This control both notifications and real-time events on the overview page.</p>"},{"location":"views/users/","title":"Users","text":"<p>Create, update and delete users.</p>"}]}